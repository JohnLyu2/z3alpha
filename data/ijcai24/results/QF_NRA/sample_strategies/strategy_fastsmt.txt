(if (> num-exprs 6609) (if (> num-consts 8) (then (using-params simplify :blast_distinct false :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx true :pull_cheap_ite false :push_ite_bv false :som true) solve-eqs (using-params qfnra-nlsat :factor true :inline_vars false :seed 409)) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 true :hoist_mul true :local_ctx false :pull_cheap_ite true :push_ite_bv true :som false) ctx-simplify (using-params propagate-values :push_ite_bv false) (using-params nla2bv :nla2bv_max_bv_size 0) (using-params propagate-values :push_ite_bv false))) (if (> size 84) (if (> num-consts 81) (then (using-params simplify :blast_distinct false :elim_and false :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite false :push_ite_bv false :som true) (using-params smt :random_seed 354)) (if (> num-exprs 2021) (if (> num-consts 60) (then (using-params simplify :blast_distinct false :elim_and false :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite false :push_ite_bv false :som true) (using-params smt :random_seed 354)) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))))) (if (> num-consts 33) (if (> num-consts 60) (then (using-params simplify :blast_distinct false :elim_and false :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite false :push_ite_bv false :som true) (using-params smt :random_seed 354)) (then (using-params simplify :blast_distinct false :elim_and false :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite false :push_ite_bv false :som true) (using-params smt :random_seed 354))) (then (using-params simplify :blast_distinct false :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx true :pull_cheap_ite false :push_ite_bv false :som true) solve-eqs (using-params qfnra-nlsat :factor true :inline_vars false :seed 409))))) (if (> size 5) (if (> size 12) (if (> num-exprs 313) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (then (using-params simplify :blast_distinct false :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx true :pull_cheap_ite false :push_ite_bv false :som true) solve-eqs (using-params qfnra-nlsat :factor true :inline_vars false :seed 409))) (if (> num-exprs 313) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-exprs 28) (if (> size 7) (if (> num-exprs 68) (if (> num-exprs 176) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> size 9) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-exprs 128) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-exprs 78) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))))))))) (if (> num-consts 3) (if (> size 9) (then (using-params simplify :blast_distinct false :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx true :pull_cheap_ite false :push_ite_bv false :som true) solve-eqs (using-params qfnra-nlsat :factor true :inline_vars false :seed 409)) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))))) (if (> size 9) (then (using-params simplify :blast_distinct false :elim_and false :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite false :push_ite_bv false :som true) (using-params smt :random_seed 354)) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))))))) (if (> num-consts 3) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-exprs 187) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-exprs 68) (if (> num-exprs 176) (then (using-params simplify :blast_distinct false :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx true :pull_cheap_ite false :push_ite_bv false :som true) solve-eqs (using-params qfnra-nlsat :factor true :inline_vars false :seed 409)) (if (> size 6) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (if (> num-exprs 57) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> size 6) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))))))) (if (> size 6) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))))) (if (> num-exprs 68) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-exprs 28) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (then (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 false :hoist_mul false :local_ctx false :pull_cheap_ite true :push_ite_bv false :som true) (if (> num-consts 0) (if (> num-exprs 78) (if (> size 41) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 187) (if (> size 5) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485))) (if (> size 7) (if (> size 9) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 176) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-consts 2) (if (> num-exprs 128) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))) (if (> size 6) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))))))) (if (> size 6) (if (> num-exprs 57) (if (> num-consts 4) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> num-exprs 68) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))) (if (> num-consts 3) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (if (> size 7) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 28) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))))) (if (> num-consts 3) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (if (> num-exprs 10) (if (> num-exprs 28) (if (> num-exprs 57) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268))) (if (> size 5) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)) (then bit-blast (using-params qfnra-nlsat :factor false :inline_vars false :seed 268)))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))) (then elim-uncnstr solve-eqs (using-params propagate-values :push_ite_bv true) (using-params smt :random_seed 485)))))))))